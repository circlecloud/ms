// @ts-nocheck
declare namespace java {
    namespace sql {
        // @ts-ignore
        interface PreparedStatement {
            /**
             * Executes the SQL query in this <code>PreparedStatement</code> object
             * and returns the <code>ResultSet</code> object generated by the query.
             */
            // @ts-ignore
             executeQuery(): java.sql.ResultSet;
            /**
             * Executes the SQL statement in this <code>PreparedStatement</code> object,
             * which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
             * <code>DELETE</code>; or an SQL statement that returns nothing,
             * such as a DDL statement.
             */
            // @ts-ignore
             executeUpdate(): number;
            /**
             * Sets the designated parameter to SQL <code>NULL</code>.
             * <P><B>Note:</B> You must specify the parameter's SQL type.
             */
            // @ts-ignore
             setNull(parameterIndex: number, sqlType: number): void;
            /**
             * Sets the designated parameter to the given Java <code>boolean</code> value.
             * The driver converts this
             * to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.
             */
            // @ts-ignore
             setBoolean(parameterIndex: number, x: boolean): void;
            /**
             * Sets the designated parameter to the given Java <code>byte</code> value.
             * The driver converts this
             * to an SQL <code>TINYINT</code> value when it sends it to the database.
             */
            // @ts-ignore
             setByte(parameterIndex: number, x: number): void;
            /**
             * Sets the designated parameter to the given Java <code>short</code> value.
             * The driver converts this
             * to an SQL <code>SMALLINT</code> value when it sends it to the database.
             */
            // @ts-ignore
             setShort(parameterIndex: number, x: number): void;
            /**
             * Sets the designated parameter to the given Java <code>int</code> value.
             * The driver converts this
             * to an SQL <code>INTEGER</code> value when it sends it to the database.
             */
            // @ts-ignore
             setInt(parameterIndex: number, x: number): void;
            /**
             * Sets the designated parameter to the given Java <code>long</code> value.
             * The driver converts this
             * to an SQL <code>BIGINT</code> value when it sends it to the database.
             */
            // @ts-ignore
             setLong(parameterIndex: number, x: number): void;
            /**
             * Sets the designated parameter to the given Java <code>float</code> value.
             * The driver converts this
             * to an SQL <code>REAL</code> value when it sends it to the database.
             */
            // @ts-ignore
             setFloat(parameterIndex: number, x: number): void;
            /**
             * Sets the designated parameter to the given Java <code>double</code> value.
             * The driver converts this
             * to an SQL <code>DOUBLE</code> value when it sends it to the database.
             */
            // @ts-ignore
             setDouble(parameterIndex: number, x: number): void;
            /**
             * Sets the designated parameter to the given <code>java.math.BigDecimal</code> value.
             * The driver converts this to an SQL <code>NUMERIC</code> value when
             * it sends it to the database.
             */
            // @ts-ignore
             setBigDecimal(parameterIndex: number, x: java.math.BigDecimal): void;
            /**
             * Sets the designated parameter to the given Java <code>String</code> value.
             * The driver converts this
             * to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
             * (depending on the argument's
             * size relative to the driver's limits on <code>VARCHAR</code> values)
             * when it sends it to the database.
             */
            // @ts-ignore
             setString(parameterIndex: number, x: string): void;
            /**
             * Sets the designated parameter to the given Java array of bytes.  The driver converts
             * this to an SQL <code>VARBINARY</code> or <code>LONGVARBINARY</code>
             * (depending on the argument's size relative to the driver's limits on
             * <code>VARBINARY</code> values) when it sends it to the database.
             */
            // @ts-ignore
             setBytes(parameterIndex: number, x: number): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.Date</code> value
             * using the default time zone of the virtual machine that is running
             * the application.
             * The driver converts this
             * to an SQL <code>DATE</code> value when it sends it to the database.
             */
            // @ts-ignore
             setDate(parameterIndex: number, x: java.sql.Date): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.Time</code> value.
             * The driver converts this
             * to an SQL <code>TIME</code> value when it sends it to the database.
             */
            // @ts-ignore
             setTime(parameterIndex: number, x: java.sql.Time): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.
             * The driver
             * converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
             * database.
             */
            // @ts-ignore
             setTimestamp(parameterIndex: number, x: java.sql.Timestamp): void;
            /**
             * Sets the designated parameter to the given input stream, which will have
             * the specified number of bytes.
             * When a very large ASCII value is input to a <code>LONGVARCHAR</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.InputStream</code>. Data will be read from the stream
             * as needed until end-of-file is reached.  The JDBC driver will
             * do any necessary conversion from ASCII to the database char format.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             */
            // @ts-ignore
             setAsciiStream(parameterIndex: number, x: java.io.InputStream, length: number): void;
            /**
             * Sets the designated parameter to the given input stream, which
             * will have the specified number of bytes.
             * When a very large Unicode value is input to a <code>LONGVARCHAR</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.InputStream</code> object. The data will be read from the
             * stream as needed until end-of-file is reached.  The JDBC driver will
             * do any necessary conversion from Unicode to the database char format.
             * The byte format of the Unicode stream must be a Java UTF-8, as defined in the
             * Java Virtual Machine Specification.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             */
            // @ts-ignore
             setUnicodeStream(parameterIndex: number, x: java.io.InputStream, length: number): void;
            /**
             * Sets the designated parameter to the given input stream, which will have
             * the specified number of bytes.
             * When a very large binary value is input to a <code>LONGVARBINARY</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.InputStream</code> object. The data will be read from the
             * stream as needed until end-of-file is reached.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             */
            // @ts-ignore
             setBinaryStream(parameterIndex: number, x: java.io.InputStream, length: number): void;
            /**
             * Clears the current parameter values immediately.
             * <P>In general, parameter values remain in force for repeated use of a
             * statement. Setting a parameter value automatically clears its
             * previous value.  However, in some cases it is useful to immediately
             * release the resources used by the current parameter values; this can
             * be done by calling the method <code>clearParameters</code>.
             */
            // @ts-ignore
             clearParameters(): void;
            /**
             * Sets the value of the designated parameter with the given object.
             * This method is similar to {@link #setObject(int parameterIndex,
             * Object x, int targetSqlType, int scaleOrLength)},
             * except that it assumes a scale of zero.
             */
            // @ts-ignore
             setObject(parameterIndex: number, x: java.lang.Object, targetSqlType: number): void;
            /**
             * <p>Sets the value of the designated parameter using the given object.
             * <p>The JDBC specification specifies a standard mapping from
             * Java <code>Object</code> types to SQL types.  The given argument
             * will be converted to the corresponding SQL type before being
             * sent to the database.
             * <p>Note that this method may be used to pass datatabase-
             * specific abstract data types, by using a driver-specific Java
             * type.
             * If the object is of a class implementing the interface <code>SQLData</code>,
             * the JDBC driver should call the method <code>SQLData.writeSQL</code>
             * to write it to the SQL data stream.
             * If, on the other hand, the object is of a class implementing
             * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
             * <code>Struct</code>, <code>java.net.URL</code>, <code>RowId</code>, <code>SQLXML</code>
             * or <code>Array</code>, the driver should pass it to the database as a
             * value of the corresponding SQL type.
             * <P>
             * <b>Note:</b> Not all databases allow for a non-typed Null to be sent to
             * the backend. For maximum portability, the <code>setNull</code> or the
             * <code>setObject(int parameterIndex, Object x, int sqlType)</code>
             * method should be used
             * instead of <code>setObject(int parameterIndex, Object x)</code>.
             * <p>
             * <b>Note:</b> This method throws an exception if there is an ambiguity, for example, if the
             * object is of a class implementing more than one of the interfaces named above.
             */
            // @ts-ignore
             setObject(parameterIndex: number, x: java.lang.Object): void;
            /**
             * Executes the SQL statement in this <code>PreparedStatement</code> object,
             * which may be any kind of SQL statement.
             * Some prepared statements return multiple results; the <code>execute</code>
             * method handles these complex statements as well as the simpler
             * form of statements handled by the methods <code>executeQuery</code>
             * and <code>executeUpdate</code>.
             * <P>
             * The <code>execute</code> method returns a <code>boolean</code> to
             * indicate the form of the first result.  You must call either the method
             * <code>getResultSet</code> or <code>getUpdateCount</code>
             * to retrieve the result; you must call <code>getMoreResults</code> to
             * move to any subsequent result(s).
             */
            // @ts-ignore
             execute(): boolean;
            /**
             * Adds a set of parameters to this <code>PreparedStatement</code>
             * object's batch of commands.
             */
            // @ts-ignore
             addBatch(): void;
            /**
             * Sets the designated parameter to the given <code>Reader</code>
             * object, which is the given number of characters long.
             * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.Reader</code> object. The data will be read from the stream
             * as needed until end-of-file is reached.  The JDBC driver will
             * do any necessary conversion from UNICODE to the database char format.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             */
            // @ts-ignore
             setCharacterStream(parameterIndex: number, reader: java.io.Reader, length: number): void;
            /**
             * Sets the designated parameter to the given
             * <code>REF(&lt;structured-type&gt;)</code> value.
             * The driver converts this to an SQL <code>REF</code> value when it
             * sends it to the database.
             */
            // @ts-ignore
             setRef(parameterIndex: number, x: java.sql.Ref): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.Blob</code> object.
             * The driver converts this to an SQL <code>BLOB</code> value when it
             * sends it to the database.
             */
            // @ts-ignore
             setBlob(parameterIndex: number, x: java.sql.Blob): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.Clob</code> object.
             * The driver converts this to an SQL <code>CLOB</code> value when it
             * sends it to the database.
             */
            // @ts-ignore
             setClob(parameterIndex: number, x: java.sql.Clob): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.Array</code> object.
             * The driver converts this to an SQL <code>ARRAY</code> value when it
             * sends it to the database.
             */
            // @ts-ignore
             setArray(parameterIndex: number, x: java.sql.Array): void;
            /**
             * Retrieves a <code>ResultSetMetaData</code> object that contains
             * information about the columns of the <code>ResultSet</code> object
             * that will be returned when this <code>PreparedStatement</code> object
             * is executed.
             * <P>
             * Because a <code>PreparedStatement</code> object is precompiled, it is
             * possible to know about the <code>ResultSet</code> object that it will
             * return without having to execute it.  Consequently, it is possible
             * to invoke the method <code>getMetaData</code> on a
             * <code>PreparedStatement</code> object rather than waiting to execute
             * it and then invoking the <code>ResultSet.getMetaData</code> method
             * on the <code>ResultSet</code> object that is returned.
             * <P>
             * <B>NOTE:</B> Using this method may be expensive for some drivers due
             * to the lack of underlying DBMS support.
             */
            // @ts-ignore
             getMetaData(): java.sql.ResultSetMetaData;
            /**
             * Sets the designated parameter to the given <code>java.sql.Date</code> value,
             * using the given <code>Calendar</code> object.  The driver uses
             * the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
             * which the driver then sends to the database.  With
             * a <code>Calendar</code> object, the driver can calculate the date
             * taking into account a custom timezone.  If no
             * <code>Calendar</code> object is specified, the driver uses the default
             * timezone, which is that of the virtual machine running the application.
             */
            // @ts-ignore
             setDate(parameterIndex: number, x: java.sql.Date, cal: java.util.Calendar): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.Time</code> value,
             * using the given <code>Calendar</code> object.  The driver uses
             * the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
             * which the driver then sends to the database.  With
             * a <code>Calendar</code> object, the driver can calculate the time
             * taking into account a custom timezone.  If no
             * <code>Calendar</code> object is specified, the driver uses the default
             * timezone, which is that of the virtual machine running the application.
             */
            // @ts-ignore
             setTime(parameterIndex: number, x: java.sql.Time, cal: java.util.Calendar): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
             * using the given <code>Calendar</code> object.  The driver uses
             * the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
             * which the driver then sends to the database.  With a
             * <code>Calendar</code> object, the driver can calculate the timestamp
             * taking into account a custom timezone.  If no
             * <code>Calendar</code> object is specified, the driver uses the default
             * timezone, which is that of the virtual machine running the application.
             */
            // @ts-ignore
             setTimestamp(parameterIndex: number, x: java.sql.Timestamp, cal: java.util.Calendar): void;
            /**
             * Sets the designated parameter to SQL <code>NULL</code>.
             * This version of the method <code>setNull</code> should
             * be used for user-defined types and REF type parameters.  Examples
             * of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
             * named array types.
             * <P><B>Note:</B> To be portable, applications must give the
             * SQL type code and the fully-qualified SQL type name when specifying
             * a NULL user-defined or REF parameter.  In the case of a user-defined type
             * the name is the type name of the parameter itself.  For a REF
             * parameter, the name is the type name of the referenced type.  If
             * a JDBC driver does not need the type code or type name information,
             * it may ignore it.
             * Although it is intended for user-defined and Ref parameters,
             * this method may be used to set a null parameter of any JDBC type.
             * If the parameter does not have a user-defined or REF type, the given
             * typeName is ignored.
             */
            // @ts-ignore
             setNull(parameterIndex: number, sqlType: number, typeName: string): void;
            /**
             * Sets the designated parameter to the given <code>java.net.URL</code> value.
             * The driver converts this to an SQL <code>DATALINK</code> value
             * when it sends it to the database.
             */
            // @ts-ignore
             setURL(parameterIndex: number, x: java.net.URL): void;
            /**
             * Retrieves the number, types and properties of this
             * <code>PreparedStatement</code> object's parameters.
             */
            // @ts-ignore
             getParameterMetaData(): java.sql.ParameterMetaData;
            /**
             * Sets the designated parameter to the given <code>java.sql.RowId</code> object. The
             * driver converts this to a SQL <code>ROWID</code> value when it sends it
             * to the database
             */
            // @ts-ignore
             setRowId(parameterIndex: number, x: java.sql.RowId): void;
            /**
             * Sets the designated parameter to the given <code>String</code> object.
             * The driver converts this to a SQL <code>NCHAR</code> or
             * <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
             * (depending on the argument's
             * size relative to the driver's limits on <code>NVARCHAR</code> values)
             * when it sends it to the database.
             */
            // @ts-ignore
             setNString(parameterIndex: number, value: string): void;
            /**
             * Sets the designated parameter to a <code>Reader</code> object. The
             * <code>Reader</code> reads the data till end-of-file is reached. The
             * driver does the necessary conversion from Java character format to
             * the national character set in the database.
             */
            // @ts-ignore
             setNCharacterStream(parameterIndex: number, value: java.io.Reader, length: number): void;
            /**
             * Sets the designated parameter to a <code>java.sql.NClob</code> object. The driver converts this to a
             * SQL <code>NCLOB</code> value when it sends it to the database.
             */
            // @ts-ignore
             setNClob(parameterIndex: number, value: java.sql.NClob): void;
            /**
             * Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
             * of characters specified by length otherwise a <code>SQLException</code> will be
             * generated when the <code>PreparedStatement</code> is executed.
             * This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
             * because it informs the driver that the parameter value should be sent to
             * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
             * driver may have to do extra work to determine whether the parameter
             * data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
             */
            // @ts-ignore
             setClob(parameterIndex: number, reader: java.io.Reader, length: number): void;
            /**
             * Sets the designated parameter to a <code>InputStream</code> object.  The inputstream must contain  the number
             * of characters specified by length otherwise a <code>SQLException</code> will be
             * generated when the <code>PreparedStatement</code> is executed.
             * This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
             * method because it informs the driver that the parameter value should be
             * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
             * the driver may have to do extra work to determine whether the parameter
             * data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
             */
            // @ts-ignore
             setBlob(parameterIndex: number, inputStream: java.io.InputStream, length: number): void;
            /**
             * Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
             * of characters specified by length otherwise a <code>SQLException</code> will be
             * generated when the <code>PreparedStatement</code> is executed.
             * This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
             * because it informs the driver that the parameter value should be sent to
             * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
             * driver may have to do extra work to determine whether the parameter
             * data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
             */
            // @ts-ignore
             setNClob(parameterIndex: number, reader: java.io.Reader, length: number): void;
            /**
             * Sets the designated parameter to the given <code>java.sql.SQLXML</code> object.
             * The driver converts this to an
             * SQL <code>XML</code> value when it sends it to the database.
             * <p>
             */
            // @ts-ignore
             setSQLXML(parameterIndex: number, xmlObject: java.sql.SQLXML): void;
            /**
             * <p>Sets the value of the designated parameter with the given object.
             * If the second argument is an <code>InputStream</code> then the stream must contain
             * the number of bytes specified by scaleOrLength.  If the second argument is a
             * <code>Reader</code> then the reader must contain the number of characters specified
             * by scaleOrLength. If these conditions are not true the driver will generate a
             * <code>SQLException</code> when the prepared statement is executed.
             * <p>The given Java object will be converted to the given targetSqlType
             * before being sent to the database.
             * If the object has a custom mapping (is of a class implementing the
             * interface <code>SQLData</code>),
             * the JDBC driver should call the method <code>SQLData.writeSQL</code> to
             * write it to the SQL data stream.
             * If, on the other hand, the object is of a class implementing
             * <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
             * <code>Struct</code>, <code>java.net.URL</code>,
             * or <code>Array</code>, the driver should pass it to the database as a
             * value of the corresponding SQL type.
             * <p>Note that this method may be used to pass database-specific
             * abstract data types.
             */
            // @ts-ignore
             setObject(parameterIndex: number, x: java.lang.Object, targetSqlType: number, scaleOrLength: number): void;
            /**
             * Sets the designated parameter to the given input stream, which will have
             * the specified number of bytes.
             * When a very large ASCII value is input to a <code>LONGVARCHAR</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.InputStream</code>. Data will be read from the stream
             * as needed until end-of-file is reached.  The JDBC driver will
             * do any necessary conversion from ASCII to the database char format.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             */
            // @ts-ignore
             setAsciiStream(parameterIndex: number, x: java.io.InputStream, length: number): void;
            /**
             * Sets the designated parameter to the given input stream, which will have
             * the specified number of bytes.
             * When a very large binary value is input to a <code>LONGVARBINARY</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.InputStream</code> object. The data will be read from the
             * stream as needed until end-of-file is reached.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             */
            // @ts-ignore
             setBinaryStream(parameterIndex: number, x: java.io.InputStream, length: number): void;
            /**
             * Sets the designated parameter to the given <code>Reader</code>
             * object, which is the given number of characters long.
             * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.Reader</code> object. The data will be read from the stream
             * as needed until end-of-file is reached.  The JDBC driver will
             * do any necessary conversion from UNICODE to the database char format.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             */
            // @ts-ignore
             setCharacterStream(parameterIndex: number, reader: java.io.Reader, length: number): void;
            /**
             * Sets the designated parameter to the given input stream.
             * When a very large ASCII value is input to a <code>LONGVARCHAR</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.InputStream</code>. Data will be read from the stream
             * as needed until end-of-file is reached.  The JDBC driver will
             * do any necessary conversion from ASCII to the database char format.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
             * it might be more efficient to use a version of
             * <code>setAsciiStream</code> which takes a length parameter.
             */
            // @ts-ignore
             setAsciiStream(parameterIndex: number, x: java.io.InputStream): void;
            /**
             * Sets the designated parameter to the given input stream.
             * When a very large binary value is input to a <code>LONGVARBINARY</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.InputStream</code> object. The data will be read from the
             * stream as needed until end-of-file is reached.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
             * it might be more efficient to use a version of
             * <code>setBinaryStream</code> which takes a length parameter.
             */
            // @ts-ignore
             setBinaryStream(parameterIndex: number, x: java.io.InputStream): void;
            /**
             * Sets the designated parameter to the given <code>Reader</code>
             * object.
             * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
             * parameter, it may be more practical to send it via a
             * <code>java.io.Reader</code> object. The data will be read from the stream
             * as needed until end-of-file is reached.  The JDBC driver will
             * do any necessary conversion from UNICODE to the database char format.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
             * it might be more efficient to use a version of
             * <code>setCharacterStream</code> which takes a length parameter.
             */
            // @ts-ignore
             setCharacterStream(parameterIndex: number, reader: java.io.Reader): void;
            /**
             * Sets the designated parameter to a <code>Reader</code> object. The
             * <code>Reader</code> reads the data till end-of-file is reached. The
             * driver does the necessary conversion from Java character format to
             * the national character set in the database.
             * <P><B>Note:</B> This stream object can either be a standard
             * Java stream object or your own subclass that implements the
             * standard interface.
             * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
             * it might be more efficient to use a version of
             * <code>setNCharacterStream</code> which takes a length parameter.
             */
            // @ts-ignore
             setNCharacterStream(parameterIndex: number, value: java.io.Reader): void;
            /**
             * Sets the designated parameter to a <code>Reader</code> object.
             * This method differs from the <code>setCharacterStream (int, Reader)</code> method
             * because it informs the driver that the parameter value should be sent to
             * the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
             * driver may have to do extra work to determine whether the parameter
             * data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
             * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
             * it might be more efficient to use a version of
             * <code>setClob</code> which takes a length parameter.
             */
            // @ts-ignore
             setClob(parameterIndex: number, reader: java.io.Reader): void;
            /**
             * Sets the designated parameter to a <code>InputStream</code> object.
             * This method differs from the <code>setBinaryStream (int, InputStream)</code>
             * method because it informs the driver that the parameter value should be
             * sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
             * the driver may have to do extra work to determine whether the parameter
             * data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
             * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
             * it might be more efficient to use a version of
             * <code>setBlob</code> which takes a length parameter.
             */
            // @ts-ignore
             setBlob(parameterIndex: number, inputStream: java.io.InputStream): void;
            /**
             * Sets the designated parameter to a <code>Reader</code> object.
             * This method differs from the <code>setCharacterStream (int, Reader)</code> method
             * because it informs the driver that the parameter value should be sent to
             * the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
             * driver may have to do extra work to determine whether the parameter
             * data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
             * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
             * it might be more efficient to use a version of
             * <code>setNClob</code> which takes a length parameter.
             */
            // @ts-ignore
             setNClob(parameterIndex: number, reader: java.io.Reader): void;
            /**
             * <p>Sets the value of the designated parameter with the given object.
             * If the second argument is an {@code InputStream} then the stream
             * must contain the number of bytes specified by scaleOrLength.
             * If the second argument is a {@code Reader} then the reader must
             * contain the number of characters specified by scaleOrLength. If these
             * conditions are not true the driver will generate a
             * {@code SQLException} when the prepared statement is executed.
             * <p>The given Java object will be converted to the given targetSqlType
             * before being sent to the database.
             * If the object has a custom mapping (is of a class implementing the
             * interface {@code SQLData}),
             * the JDBC driver should call the method {@code SQLData.writeSQL} to
             * write it to the SQL data stream.
             * If, on the other hand, the object is of a class implementing
             * {@code Ref}, {@code Blob}, {@code Clob},  {@code NClob},
             * {@code Struct}, {@code java.net.URL},
             * or {@code Array}, the driver should pass it to the database as a
             * value of the corresponding SQL type.
             * <p>Note that this method may be used to pass database-specific
             * abstract data types.
             * <P>
             * The default implementation will throw {@code SQLFeatureNotSupportedException}
             */
            // @ts-ignore
             setObject(parameterIndex: number, x: java.lang.Object, targetSqlType: java.sql.SQLType, scaleOrLength: number): void;
            /**
             * Sets the value of the designated parameter with the given object.
             * This method is similar to {@link #setObject(int parameterIndex,
             * Object x, SQLType targetSqlType, int scaleOrLength)},
             * except that it assumes a scale of zero.
             * <P>
             * The default implementation will throw {@code SQLFeatureNotSupportedException}
             */
            // @ts-ignore
             setObject(parameterIndex: number, x: java.lang.Object, targetSqlType: java.sql.SQLType): void;
            /**
             * Executes the SQL statement in this <code>PreparedStatement</code> object,
             * which must be an SQL Data Manipulation Language (DML) statement,
             * such as <code>INSERT</code>, <code>UPDATE</code> or
             * <code>DELETE</code>; or an SQL statement that returns nothing,
             * such as a DDL statement.
             * <p>
             * This method should be used when the returned row count may exceed
             * {@link Integer#MAX_VALUE}.
             * <p>
             * The default implementation will throw {@code UnsupportedOperationException}
             */
            // @ts-ignore
             executeLargeUpdate(): number;
        }
    }
}
